{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","height","textAlign","display","justifyContent","alignItems","backButton","marginRight","spacing","instructions","marginTop","marginBottom","Welcome","props","Fragment","Typography","variant","gutterBottom","Questions","index","Math","pow","numList","numbers","filter","i","toString","Answer","answer","parseInt","answers","current","reverse","join","App","classes","React","useState","activeStep","setActiveStep","useRef","Array","fill","steps","map","_","handleNext","val","prevActiveStep","buttons","length","Button","color","onClick","className","stepIndex","getStepContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,UAAW,SACXC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEdC,WAAY,CACVC,YAAaT,EAAMU,QAAQ,IAE7BC,aAAc,CACZC,UAAWZ,EAAMU,QAAQ,GACzBG,aAAcb,EAAMU,QAAQ,QAIhC,SAASI,EAAQC,GACf,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,qCAON,SAASC,EAAUL,GACjB,IAAMM,EAAQC,KAAKC,IAAI,EAAGR,EAAMM,OAC1BG,EAAUT,EAAMU,QAAQC,QAAO,SAAAC,GAAC,OAAKA,EAAIN,KAAWA,KAE1D,OACE,kBAAC,IAAML,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,iDAGA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GACzCK,EAAQI,aAMjB,SAASC,EAAOd,GACd,IAAMe,EAASC,SAAShB,EAAMiB,QAAQC,QAAQC,UAAUC,KAAK,IAAK,GAElE,OACE,kBAAC,IAAMnB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,mBAGA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GACzCW,IAMM,SAASM,IACtB,IAAMC,EAAUvC,IADY,EAEQwC,IAAMC,SAAS,GAFvB,mBAErBC,EAFqB,KAETC,EAFS,KAGtBT,EAAUM,IAAMI,OAAOC,MAAM,GAAGC,KAAK,IACrCC,EAAQF,MAAM,GAAGC,OAEjBnB,EAAUkB,MAAM,IAAIC,OAAOE,KAAI,SAACC,EAAGpB,GAAJ,OAAUA,KAAGD,QAAO,SAAAC,GAAC,OAAIA,EAAI,KAoBlE,IAAMqB,EAAa,SAACC,IACL,IAATA,IACFjB,EAAQC,QAAQO,EAAa,GAAKS,GAEpCR,GAAc,SAACS,GAAD,OAAoBA,EAAiB,MAOjDC,EAAU,KA4Bd,OA1BEA,EADEX,IAAeK,EAAMO,OAAS,EAE9B,6BACE,kBAACC,EAAA,EAAD,CAAQnC,QAAQ,YAAYoC,MAAM,UAAUC,QAR9B,WAClBd,EAAc,KAOV,UAGoB,IAAfD,EAEP,6BACE,kBAACa,EAAA,EAAD,CAAQnC,QAAQ,YAAYoC,MAAM,UAAUC,QAAS,kBAAMP,GAAY,KAAvE,SAKF,6BACE,6BACE,kBAACK,EAAA,EAAD,CAAQnC,QAAQ,YAAYoC,MAAM,UAAUC,QAAS,kBAAMP,EAAW,IAAIQ,UAAWnB,EAAQ7B,YAA7F,OAGA,kBAAC6C,EAAA,EAAD,CAAQnC,QAAQ,YAAYoC,MAAM,YAAYC,QAAS,kBAAMP,EAAW,KAAxE,QASN,yBAAKQ,UAAWnB,EAAQpC,MACtB,6BACE,kBAACgB,EAAA,EAAD,CAAYuC,UAAWnB,EAAQ1B,cA5DrC,SAAwB8C,GACtB,OAAQA,GACN,KAAK,EACH,OAAO,kBAAC3C,EAAD,MACT,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,kBAACM,EAAD,CAAWK,QAASA,EAASJ,MAAOoC,EAAY,IACzD,KAAK,EACH,OAAO,kBAAC5B,EAAD,CAAQG,QAASA,IAC1B,QACE,MAAO,qBA8CuC0B,CAAelB,IAC5DW,IC1HWQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC/B,EAAD,QAGJgC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8983453c.chunk.js","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    height: '50vh',\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Welcome(props) {\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" gutterBottom>\n        Choose a number between 1 and 63\n      </Typography>\n    </React.Fragment>\n  );\n}\n\nfunction Questions(props) {\n  const index = Math.pow(2, props.index);\n  const numList = props.numbers.filter(i => (i & index) === index);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" gutterBottom>\n        Is your number present in the following list?\n      </Typography>\n      <Typography variant=\"subtitle1\" gutterBottom>\n        {numList.toString()}\n      </Typography>\n    </React.Fragment>\n  );\n}\n\nfunction Answer(props) {\n  const answer = parseInt(props.answers.current.reverse().join(''), 2);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" gutterBottom>\n        Your number is:\n      </Typography>\n      <Typography variant=\"subtitle1\" gutterBottom>\n        {answer}\n      </Typography>\n    </React.Fragment>\n  );\n}\n\nexport default function App() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const answers = React.useRef(Array(6).fill(0));\n  const steps = Array(8).fill();\n\n  const numbers = Array(64).fill().map((_, i) => i).filter(i => i > 0);\n\n  function getStepContent(stepIndex) {\n    switch (stepIndex) {\n      case 0:\n        return <Welcome />;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n        return <Questions numbers={numbers} index={stepIndex - 1} />\n      case 7:\n        return <Answer answers={answers} />\n      default:\n        return 'Unknown stepIndex';\n    }\n  }\n\n  const handleNext = (val) => {\n    if (val !== -1) {\n      answers.current[activeStep - 1] = val;\n    }\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  let buttons = null;\n  if (activeStep === steps.length - 1) {\n    buttons = (\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleReset}>Again</Button>\n      </div>\n    );\n  } else if (activeStep === 0) {\n    buttons = (\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => handleNext(-1)}>Done</Button>\n      </div>\n    );\n  } else {\n    buttons = (\n      <div>\n        <div>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => handleNext(1)} className={classes.backButton}>\n            Yes\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={() => handleNext(0)}>\n            No\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n        {buttons}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Container from '@material-ui/core/Container';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container>\n      <App />\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}